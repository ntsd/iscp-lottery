name: ISCPLotteryContract
description: ISCPLotteryContract description

events:
  roundFinish:
    roundIdx: Uint32 // finished round index
    nextRoundIdx: Uint32 // next round index
  buy:
    address: Address // address of the buyer
    amount: Uint64 // amount of iotas
    roundIdx: Uint32 // the lottery round number
  round:
    idx: Uint32 // index of lottery round
    ticketCount: Uint32 // number of tickets for the round
    winningNumber: String // the winning numbers of the round
    prizePool: Uint64 // iota price pool of the round
    drawAt: Uint64 // unix timestamp when draw of the round
    isDrawn: Bool // is the round drawn?

structs:
  Ticket:
    idx: Uint32 // index of ticket
    id: RequestID // request id of the ticket
    roundIdx: Uint32 // the lottery round number
    buyer: AgentID // the ticket buyer
    number: String // the lottery number of the ticket
    amount: Uint64 // iotas amount of the ticket
    prizeAmount: Uint64 // iotas prize amount of the ticket
    matchedDigit: Uint8 // digits matched of the prize
    isPaid: Bool // is the prize paid?
    createdAt: Uint64 // unix timestamp when the ticket create
  Round:
    idx: Uint32 // index of lottery round
    ticketCount: Uint32 // number of tickets for the round
    winningNumber: String // the winning numbers of the round
    prizePool: Uint64 // iota price pool of the round
    drawAt: Uint64 // unix timestamp when draw of the round
    isDrawn: Bool // is the round drawn?

typedefs: {}

state:
  owner: AgentID // current owner of this smart contract
  rounds: Round[] // lottery rounds
  currentRoundIdx: Uint32 // the current lottery round
  tickets: Ticket[] // the current round tickets
  historyTickets: Ticket[] // the history of the previous round tickets

funcs:
  init:
    params:
      owner: AgentID? // optional owner of this smart contract
  setOwner:
    access: owner // current owner of this smart contract
    params:
      owner: AgentID // new owner of this smart contract
  createTicket:
    params:
      number: String // the lottery number of the ticket
  getMyTickets:
    results:
      tickets: Ticket[] // the owner tickets of the current round
  getMyHistoryTickets:
    results:
      tickets: Ticket[] // the owner tickets of the previous round
  draw:
    access: self // only SC itself can invoke this function
views:
  getOwner:
    results:
      owner: AgentID // current owner of this smart contract
  getCurrentRound:
    results:
      round: Round
  getRound:
    params:
      roundIdx: Uint32
    results:
      round: Round
